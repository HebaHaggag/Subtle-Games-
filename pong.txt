# Implementation of classic arcade game Pong based on some linear algebra rules.

import simplegui
import random

# initialize globals - pos and vel encode vertical info for paddles
WIDTH = 600
HEIGHT = 400       
BALL_RADIUS = 20
ball_pos=[WIDTH/2 ,HEIGHT/2]
ball_vel=[0,0]
PAD_WIDTH = 8
PAD_HEIGHT = 80
HALF_PAD_WIDTH = PAD_WIDTH / 2
HALF_PAD_HEIGHT = PAD_HEIGHT / 2
LEFT = False
RIGHT = True
paddle1_pos=HEIGHT/2
paddle2_pos=HEIGHT/2
paddle1_vel=0
paddle2_vel=0
speed=0 
score1=0
score2=0
direction=LEFT


def gutters():
    global ball_pos ,ball_vel,direction,score1,score2
    x1=ball_pos[0]-BALL_RADIUS 
    x2=ball_pos[0]+BALL_RADIUS
    y1=ball_pos[1]
    z=PAD_WIDTH
    a=[z,paddle1_pos-HALF_PAD_HEIGHT] 
    b=[z,paddle1_pos+HALF_PAD_HEIGHT]
    c=[WIDTH-z,paddle2_pos-HALF_PAD_HEIGHT]
    
    d=[WIDTH-z,paddle2_pos+HALF_PAD_HEIGHT]
    if   (y1>=a[1] and y1<=b[1])and x1<=z :
        ball_vel[0]*=-1
    elif x1<=z:
        direction=RIGHT 
        spawn_ball(direction)
        score2+=1
    if    (y1>=c[1] and y1<=d[1])and x2>=WIDTH-z :
         ball_vel[0]*=-1
        
    elif x2>=(WIDTH-PAD_WIDTH):
        direction=LEFT
        score1+=1
        spawn_ball(direction)
        

def spawn_ball(direction):
""" This function spawns a ball on the screen from either the left or the right"""
    global ball_pos, ball_vel,speed 
    ball_vel=[0,0]
    speed=3          #speed of the ball , couldn't get how to use random.range
    
    ball_pos=[WIDTH/2 ,HEIGHT/2]
    if direction==RIGHT :
        
        ball_vel[0]+=speed 
        ball_vel[1]-=speed
        ball_pos[0]+=ball_vel[0]
        ball_pos[1]+=ball_vel[1]
    elif direction==LEFT:
        ball_vel[0]-=speed
        ball_vel[1]-=speed
        ball_pos[0]+=ball_vel[0]
        ball_pos[1]+=ball_vel[1] 
        



    
def new_game():
    global paddle1_pos, paddle2_pos, paddle1_vel, paddle2_vel  # these are numbers
    global score1, score2 
    paddle1_pos =paddle2_pos=HEIGHT/2
    score1=score2=0
    
    spawn_ball(direction)

def draw(canvas):
    global score1, score2, paddle1_pos, paddle2_pos, ball_pos, ball_vel
    ball_pos[0]+=ball_vel[0]
    ball_pos[1]+=ball_vel[1]
 
        
   
    canvas.draw_line([WIDTH / 2, 0],[WIDTH / 2, HEIGHT], 1, "White")
    canvas.draw_line([PAD_WIDTH, 0],[PAD_WIDTH, HEIGHT], 1, "White")
    canvas.draw_line([WIDTH - PAD_WIDTH, 0],[WIDTH - PAD_WIDTH, HEIGHT], 1, "White")
    canvas.draw_circle(ball_pos,BALL_RADIUS,1 ,'White','White')
    canvas.draw_line((4,paddle1_pos +HALF_PAD_HEIGHT) ,(4,paddle1_pos-HALF_PAD_HEIGHT) ,PAD_WIDTH ,'White')
    canvas.draw_line ([WIDTH-4,(paddle2_pos-HALF_PAD_HEIGHT)],[WIDTH-4,(paddle2_pos+HALF_PAD_HEIGHT)],PAD_WIDTH,'White')
    canvas.draw_text(str(score1) ,[(WIDTH/4)-PAD_WIDTH,HEIGHT/6] ,50,'White') 
    canvas.draw_text(str(score2) ,[(3*WIDTH/4)-PAD_WIDTH,HEIGHT/6] ,50,'White')   
   
    paddle1_pos-=paddle1_vel
    paddle2_pos-=paddle2_vel
    
    gutters()
    ball_bounce() 
    paddle_collision()
   
    
def paddle_collision():
""" This function detects when the paddle manipylated by the user hits the top or down and make the paddels reflects automatically to the other direction"""
    global paddle2_vel ,paddle1_vel
    x=paddle1_pos+HALF_PAD_HEIGHT 
    y=paddle1_pos-HALF_PAD_HEIGHT
    if y<=0 :
        paddle1_vel*=-1
    if x>=HEIGHT :
        paddle1_vel*=-1
        
    b=paddle2_pos+HALF_PAD_HEIGHT 
    a=paddle2_pos-HALF_PAD_HEIGHT
    if a<=0 :
        paddle2_vel*=-1
    if b>=HEIGHT :
        paddle2_vel*=-1
        

              
def ball_bounce(): #COLLISON/reflection OF THE BALL WITH TOP &DOWN walls
    global ball_pos , ball_vel 
    x=ball_pos[1]-BALL_RADIUS 
    y=ball_pos[1]+BALL_RADIUS
    if x<=0 :
        ball_vel[1]*=-1
    elif y>=HEIGHT :
        ball_vel[1]*=-1 
        
        
        
def keydown(key):
    
    global paddle1_vel, paddle2_vel
   
    if key==simplegui.KEY_MAP['w'] :
        paddle1_vel+=(speed+2)
    elif  key==simplegui.KEY_MAP['s']:
        paddle1_vel-=(speed+2) 
    elif key == simplegui.KEY_MAP["up"] :
        paddle2_vel+=(speed+2)
    elif key==simplegui.KEY_MAP["down"]:
        
        paddle2_vel-=(speed+2)
   
def keyup(key):
    global paddle1_vel, paddle2_vel
    if key==simplegui.KEY_MAP['w'] :
        
        paddle1_vel=0
    if  key==simplegui.KEY_MAP['s']:
        paddle1_vel=0 
    if key == simplegui.KEY_MAP["up"] :
        paddle2_vel=0
    if key==simplegui.KEY_MAP["down"]:  
        paddle2_vel=0
       
    
frame = simplegui.create_frame("Pong", WIDTH, HEIGHT)
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)

simplegui.create_timer(1000, spawn_ball)
frame.add_button('Restart',new_game ,60)


new_game()
frame.start()


